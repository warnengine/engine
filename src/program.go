package main

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/go-gl/gl/v4.2-core/gl"
	"github.com/go-gl/mathgl/mgl32"
)

// Program stores settings and shaders to draw 3D object.
type Program struct {
	glProgram uint32
}

// CreateMaterial loads and compiles shaders and returns the prepared Material/
func CreateProgram(vertexShaderPath string, fragmentShaderPath string) Program {
	// Load source code of the vertex shader
	vertexShaderSource := ReadFile(vertexShaderPath)
	// Compile the vertex shader
	vertexShader, err := compileShader(string(vertexShaderSource), gl.VERTEX_SHADER, vertexShaderPath)
	if err != nil {
		panic(err)
	}
	// Load source code of the fragment shader
	fragmentShaderSource := ReadFile(fragmentShaderPath)
	// Compile the fragment shader
	fragmentShader, err := compileShader(string(fragmentShaderSource), gl.FRAGMENT_SHADER, fragmentShaderPath)
	if err != nil {
		panic(err)
	}
	// Create the program and attach shaders
	prog := gl.CreateProgram()
	gl.AttachShader(prog, vertexShader)
	gl.AttachShader(prog, fragmentShader)
	gl.LinkProgram(prog)

	return Program{prog}
}

// Use tells the rendering API to use a specific material (shaders by-the-way).
func (program *Program) Use() {
	gl.UseProgram(program.glProgram)
}

// UseInputMatrix links a 4x4 matrix to the material
func (program *Program) UseInputMatrix(matrix mgl32.Mat4, inputName string) {
	inputID := gl.GetUniformLocation(program.glProgram, gl.Str(inputName+"\x00"))
	checkInputID(inputID, inputName)
	gl.UniformMatrix4fv(inputID, 1, false, &matrix[0])
}

// UseInputVec3 links a vec3 to the material
func (program *Program) UseInputVec3(vec mgl32.Vec3, inputName string) {
	inputID := gl.GetUniformLocation(program.glProgram, gl.Str(inputName+"\x00"))
	checkInputID(inputID, inputName)
	gl.Uniform3fv(inputID, 1, &vec[0])
}

// UseInputVec2 links a vec2 to the material
func (program *Program) UseInputVec2(vec mgl32.Vec2, inputName string) {
	inputID := gl.GetUniformLocation(program.glProgram, gl.Str(inputName+"\x00"))
	checkInputID(inputID, inputName)
	gl.Uniform2fv(inputID, 1, &vec[0])

}

// UseInputInt links an integer to the material
func (program *Program) UseInputInt(vec int32, inputName string) {
	inputID := gl.GetUniformLocation(program.glProgram, gl.Str(inputName+"\x00"))
	checkInputID(inputID, inputName)
	gl.Uniform1i(inputID, vec)

}

// UseCamera tells the rendering API to use a camera.
func (program *Program) UseCamera(camera Camera) {
	program.UseInputMatrix(camera.projection, "projection")
	program.UseInputMatrix(camera.view, "view")
}

func checkInputID(inputID int32, inputName string) {
	if inputID == gl.INVALID_OPERATION {
		panic(inputName + " does not correspond to a valid uniform variable location for the specified program object.")
	} else if inputID == gl.INVALID_VALUE {
		panic("The given program is not a value generated by OpenGL.")
	}
}

// compileShader compiles shaders and return a program. Credit: https://github.com/go-gl/example/blob/master/gl41core-cube/cube.go
func compileShader(source string, shaderType uint32, shaderName string) (uint32, error) {
	start := time.Now()
	log.Printf("-> Compiling %s", shaderName)
	shader := gl.CreateShader(shaderType)

	csources, free := gl.Strs(source + "\x00")
	gl.ShaderSource(shader, 1, csources, nil)
	free()
	gl.CompileShader(shader)

	var status int32
	gl.GetShaderiv(shader, gl.COMPILE_STATUS, &status)
	if status == gl.FALSE {
		var logLength int32
		gl.GetShaderiv(shader, gl.INFO_LOG_LENGTH, &logLength)

		log := strings.Repeat("\x00", int(logLength+1))
		gl.GetShaderInfoLog(shader, logLength, nil, gl.Str(log))

		return 0, fmt.Errorf("Failed to compile %v\n%v\n%v", shaderName, source, log)
	}

	elapsed := time.Now().Sub(start)
	log.Printf("-> End of compiling %f", elapsed.Seconds())
	return shader, nil
}
